// Mocks generated by Mockito 5.0.16 from annotations
// in zip_app/test/usecase_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i3;

import 'package:mockito/mockito.dart' as _i1;
import 'package:zip_app/domain/data/gift_card.dart' as _i4;
import 'package:zip_app/domain/repository/cart_repository.dart' as _i5;
import 'package:zip_app/domain/repository/gift_card_repository.dart' as _i2;

// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

/// A class which mocks [GiftCardRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockGiftCardRepository extends _i1.Mock
    implements _i2.GiftCardRepository {
  MockGiftCardRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<List<_i4.GiftCard>> fetchAllGiftCards() =>
      (super.noSuchMethod(Invocation.method(#fetchAllGiftCards, []),
              returnValue: Future<List<_i4.GiftCard>>.value(<_i4.GiftCard>[]))
          as _i3.Future<List<_i4.GiftCard>>);
  @override
  String toString() => super.toString();
}

/// A class which mocks [CartRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockCartRepository extends _i1.Mock implements _i5.CartRepository {
  MockCartRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<void> checkout(List<_i4.GiftCard>? items) =>
      (super.noSuchMethod(Invocation.method(#checkout, [items]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i3.Future<void>);
  @override
  String toString() => super.toString();
}
